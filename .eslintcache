[{"F:\\Programming\\InProgress\\pathfinder\\src\\index.js":"1","F:\\Programming\\InProgress\\pathfinder\\src\\App.js":"2","F:\\Programming\\InProgress\\pathfinder\\src\\reportWebVitals.js":"3","F:\\Programming\\InProgress\\pathfinder\\src\\PathfindingVisualizer\\PathfindingVisualizer.js":"4","F:\\Programming\\InProgress\\pathfinder\\src\\PathfindingVisualizer\\Node\\Node.js":"5","F:\\Programming\\InProgress\\pathfinder\\src\\algorithms\\dijkstra.js":"6","F:\\Programming\\InProgress\\pathfinder\\src\\Modal\\Modal.js":"7","F:\\Programming\\InProgress\\pathfinder\\src\\algorithms\\astar.js":"8","F:\\Programming\\InProgress\\Pathfinder\\src\\index.js":"9","F:\\Programming\\InProgress\\Pathfinder\\src\\reportWebVitals.js":"10","F:\\Programming\\InProgress\\Pathfinder\\src\\App.js":"11","F:\\Programming\\InProgress\\Pathfinder\\src\\PathfindingVisualizer\\PathfindingVisualizer.js":"12","F:\\Programming\\InProgress\\Pathfinder\\src\\Modal\\Modal.js":"13","F:\\Programming\\InProgress\\Pathfinder\\src\\PathfindingVisualizer\\Node\\Node.js":"14","F:\\Programming\\InProgress\\Pathfinder\\src\\algorithms\\astar.js":"15","F:\\Programming\\InProgress\\Pathfinder\\src\\algorithms\\dijkstra.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":309,"mtime":1607881266085,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":18158,"mtime":1608161368204,"results":"21","hashOfConfig":"18"},{"size":717,"mtime":1607748846063,"results":"22","hashOfConfig":"18"},{"size":2406,"mtime":1608136134409,"results":"23","hashOfConfig":"18"},{"size":2083,"mtime":1608163191255,"results":"24","hashOfConfig":"18"},{"size":6610,"mtime":1608401231838,"results":"25","hashOfConfig":"18"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":309,"mtime":1607881266085,"results":"29","hashOfConfig":"27"},{"size":18158,"mtime":1608161368204,"results":"30","hashOfConfig":"27"},{"size":2083,"mtime":1608163191255,"results":"31","hashOfConfig":"27"},{"size":717,"mtime":1607748846063,"results":"32","hashOfConfig":"27"},{"size":6320,"mtime":1611718501222,"results":"33","hashOfConfig":"27"},{"size":2406,"mtime":1608136134409,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"11c17t6",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r1qbst",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Programming\\InProgress\\pathfinder\\src\\index.js",[],["72","73"],"F:\\Programming\\InProgress\\pathfinder\\src\\App.js",[],"F:\\Programming\\InProgress\\pathfinder\\src\\reportWebVitals.js",[],"F:\\Programming\\InProgress\\pathfinder\\src\\PathfindingVisualizer\\PathfindingVisualizer.js",["74","75","76","77","78","79","80","81","82"],"import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrderDijkstra} from '../algorithms/dijkstra';\r\nimport {astar, getNodesInShortestPathOrderAstar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      moveStart: false,\r\n      moveFinish: false,\r\n      startNodeCol: START_NODE_COL,\r\n      startNodeRow: START_NODE_ROW,\r\n      finishNodeCol: FINISH_NODE_COL,\r\n      finishNodeRow: FINISH_NODE_ROW,\r\n      working: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n    window.onclick = function(event) {\r\n      if (!event.target.matches('#dropbtn')) {\r\n        document.getElementById(\"dropdown\").className = 'dropdown-content hide';\r\n        document.getElementById(\"dropbtn\").className = 'navItem';\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.working) return;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    if (row === startNodeRow && col === startNodeCol){\r\n      this.setState({mouseIsPressed: true, moveStart: true});\r\n    }\r\n    else if (row === finishNodeRow && col === finishNodeCol) {\r\n      this.setState({mouseIsPressed: true, moveFinish: true});\r\n    }\r\n    else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.working) return;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (this.state.moveStart) {\r\n      const {startNodeCol} = this.state;\r\n      const {startNodeRow} = this.state;\r\n      const newGrid2 = updateStart(this.state.grid, startNodeRow, startNodeCol);\r\n      const newGrid = updateStart(newGrid2, row, col);\r\n      this.setState({grid: newGrid, startNodeCol: col, startNodeRow: row});\r\n    }\r\n    else if (this.state.moveFinish){\r\n      const {finishNodeCol} = this.state;\r\n      const {finishNodeRow} = this.state;\r\n      const newGrid2 = updateFinish(this.state.grid, finishNodeRow, finishNodeCol);\r\n      const newGrid = updateFinish(newGrid2, row, col);\r\n      this.setState({grid: newGrid, finishNodeCol: col, finishNodeRow: row});\r\n    }\r\n    else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid});\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false, moveStart: false, moveFinish: false});\r\n  }\r\n\r\n  animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, algo) {\r\n    const node2 = visitedNodesInOrder[0];\r\n    document.getElementById(`node-${node2.row}-${node2.col}`).className =\r\n      'node node-visited node-start';\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder, algo);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      const node = visitedNodesInOrder[i];\r\n      setTimeout(() => {\r\n        if (i === (visitedNodesInOrder.length - 1)){\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-finish';\r\n        }\r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder, algo) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[0];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path node-start';\r\n    }, 50 * 0);\r\n    for (let i = 1; i < (nodesInShortestPathOrder.length - 1); i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    const x = nodesInShortestPathOrder.length - 1;\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[x];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path node-finish';\r\n      document.getElementById(`navGenMaze`).className = 'navItem';\r\n      document.getElementById(`navClear`).className = 'navItem';\r\n      document.getElementById(`navClearP`).className = 'navItem';\r\n      if (algo === 1) {\r\n        document.getElementById(`navPathDijkstra`).className = 'visButton vertical-center';\r\n      }\r\n      else if (algo === 2) {\r\n        document.getElementById(`navPathASearch`).className = 'visButton vertical-center';\r\n      }\r\n    }, 50 * x);\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    document.getElementById(`navPathDijkstra`).className = 'visButton vertical-center disabled';\r\n    this.clearPath();\r\n    this.setState({working: true});\r\n    const {grid} = this.state;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    const newGrid = removeWall(grid, startNodeRow, startNodeCol);\r\n    const newGrid2 = removeWall(newGrid, finishNodeRow, finishNodeCol);\r\n    this.setState({grid: newGrid2});\r\n    const startNode = newGrid2[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid2[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = dijkstra(newGrid2, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, 1);\r\n  }\r\n\r\n  visualizeASearch() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    document.getElementById(`navPathASearch`).className = 'visButton vertical-center disabled';\r\n    this.clearPath();\r\n    this.setState({working: true});\r\n    const {grid} = this.state;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    const newGrid = removeWall(grid, startNodeRow, startNodeCol);\r\n    const newGrid2 = removeWall(newGrid, finishNodeRow, finishNodeCol);\r\n    this.setState({grid: newGrid2});\r\n    const startNode = newGrid2[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid2[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = astar(newGrid2, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, 2);\r\n  }\r\n\r\n  clearBoard() {\r\n    const grid2 = getInitialGrid();\r\n    this.setState({grid: grid2, startNodeCol: START_NODE_COL, startNodeRow: START_NODE_ROW, finishNodeRow: FINISH_NODE_ROW, finishNodeCol: FINISH_NODE_COL});\r\n    const {grid} = this.state;\r\n    const len = grid.length;\r\n    const len2 = grid[0].length;\r\n    for (var i = 0; i < len; i++) {\r\n      for (var x = 0; x < len2; x++) {\r\n        if (x === this.state.startNodeCol && i === this.state.startNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-start\";\r\n        }\r\n        else if (x === this.state.finishNodeCol && i === this.state.finishNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-finish\";\r\n        }\r\n        else {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    document.getElementById(`navGenMaze`).className = 'navItem';\r\n    this.setState({working: false});\r\n  }\r\n\r\n  clearPath(){\r\n    const {grid} = this.state;\r\n    const len = grid.length;\r\n    const len2 = grid[0].length;\r\n    for (var i = 0; i < len; i++) {\r\n      for (var x = 0; x < len2; x++) {\r\n        if (x === this.state.startNodeCol && i === this.state.startNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-start\";\r\n        }\r\n        else if (x === this.state.finishNodeCol && i === this.state.finishNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-finish\";\r\n        }\r\n        else {\r\n          if(grid[i][x].isWall === false){\r\n            document.getElementById(`node-${i}-${x}`).className = \"node\";\r\n          }\r\n          else {\r\n            document.getElementById(`node-${i}-${x}`).className = \"node node-wall\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  genMaze_orientation(width, height) {\r\n    if (width < height) {\r\n      return 'h';\r\n    }\r\n    else if (height < width) {\r\n      return 'v';\r\n    }\r\n    else {\r\n      var rand = Math.random();\r\n      if (rand < 0.5){\r\n        return 'h';\r\n      }\r\n      else {\r\n        return 'v';\r\n      }\r\n    }\r\n  }\r\n\r\n  randomIntRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  genMaze_divide(grid, x, y, x2, y2, ori) {\r\n    if (ori === 'h' ){\r\n      if ((x2 - x) < 2) {\r\n        return grid;\r\n      }\r\n      else {\r\n        var difY = Math.floor(this.randomIntRange(y, y2) / 2) * 2;\r\n        var hole = Math.floor(this.randomIntRange(x, x2) / 2) * 2 + 1;\r\n        for (var i = x; i <= x2; i++){\r\n          if (i !== hole) {\r\n            grid = getNewGridWithWallToggled(grid, difY, i);\r\n          }\r\n        }\r\n        grid = this.genMaze_divide(grid, x, y, x2, (difY - 1), this.genMaze_orientation((x2 - x), ((difY - 1) - y)));\r\n        grid = this.genMaze_divide(grid, x, (difY + 1), x2, y2, this.genMaze_orientation((x2 - x), (y2 - (difY + 1))));\r\n      }\r\n    }\r\n    else {\r\n      if ((y2 - y) < 2) {\r\n        return grid;\r\n      }\r\n      else {\r\n        var difX = Math.floor(this.randomIntRange(x, x2) / 2) * 2;\r\n        var hole = Math.floor(this.randomIntRange(y, y2) / 2) * 2 + 1;\r\n        for (var i = y; i <= y2; i++){\r\n          if (i !== hole) {\r\n            grid = getNewGridWithWallToggled(grid, i, difX);\r\n          }\r\n        }\r\n        grid = this.genMaze_divide(grid, x, y, (difX - 1), y2, this.genMaze_orientation(((difX - 1) - x), (y2 - y)));\r\n        grid = this.genMaze_divide(grid, (difX + 1), y, x2, y2, this.genMaze_orientation((x2 - (difX + 1)), (y2 - y)));\r\n      }\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  generateMaze() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    var {grid} = this.state;\r\n    grid = this.genMaze_divide(grid, 0, 0, 49, 19, this.genMaze_orientation(49, 19));\r\n    this.setState({grid});\r\n    document.getElementById(`navClear`).className = 'navItem';\r\n    document.getElementById(`navClearP`).className = 'navItem';\r\n  }\r\n\r\n  selectAlgoDijkstra() {\r\n    this.clearPath();\r\n    document.getElementById(\"selectDijkstra\").className = 'active disabled';\r\n    document.getElementById(\"selectASearch\").className = '';\r\n    document.getElementById(\"descNo\").className = 'description hide';\r\n    document.getElementById(\"descDijkstra\").className = 'description show';\r\n    document.getElementById(\"descASearch\").className = 'description hide';\r\n    document.getElementById(\"navPathNo\").className = 'visButton vertical-center disabled hide';\r\n    document.getElementById(\"navPathDijkstra\").className = 'visButton vertical-center';\r\n    document.getElementById(\"navPathASearch\").className = 'visButton vertical-center hide';\r\n  }\r\n\r\n  selectAlgoASearch() {\r\n    this.clearPath();\r\n    document.getElementById(\"selectDijkstra\").className = '';\r\n    document.getElementById(\"selectASearch\").className = 'active disabled';\r\n    document.getElementById(\"descNo\").className = 'description hide';\r\n    document.getElementById(\"descDijkstra\").className = 'description hide';\r\n    document.getElementById(\"descASearch\").className = 'description show';\r\n    document.getElementById(\"navPathNo\").className = 'visButton vertical-center disabled hide';\r\n    document.getElementById(\"navPathDijkstra\").className = 'visButton vertical-center hide';\r\n    document.getElementById(\"navPathASearch\").className = 'visButton vertical-center';\r\n  }\r\n\r\n  dropdownToggle() {\r\n    document.getElementById(\"dropbtn\").className = 'navItem disabled';\r\n    document.getElementById(\"dropdown\").className = 'dropdown-content show';\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"topMenu\">\r\n          <a onClick={() => window.location.reload(false)} className=\"vertical-center title\"><h1><b>PathFinder</b></h1></a>\r\n          <span className=\"vertical-center nav\">\r\n            <a id=\"dropbtn\" onClick={() => this.dropdownToggle()} href=\"#\" className=\"navItem\">Algorithms <span className=\"caretDown\">▼</span></a>\r\n            <a id=\"navGenMaze\" onClick={() => this.generateMaze()} className=\"navItem\">Generate Maze</a>\r\n            <a id=\"navClear\" onClick={() => this.clearBoard()} className=\"navItem\">Clear Board</a>\r\n            <a id=\"navClearP\" onClick={() => this.clearPath()} className=\"navItem\">Clear Path</a>\r\n          </span>\r\n          <button id=\"navPathNo\" className=\"visButton vertical-center disabled\">Find Path</button>\r\n          <button id=\"navPathDijkstra\" className=\"visButton vertical-center hide\" onClick={() => this.visualizeDijkstra()}>Find Path</button>\r\n          <button id=\"navPathASearch\" className=\"visButton vertical-center hide\" onClick={() => this.visualizeASearch()}>Find Path</button>\r\n        </div>\r\n        <div className=\"keyMenu\">\r\n          <span className=\"keyMenuItem\"><span className=\"endNode\">★</span> Start Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"endNode\">⦿</span> End Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample\"></span> Unvisited Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample2\"></span> Visited Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample3\"></span> Path Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample4\"></span> Wall Node</span>\r\n        </div>\r\n        <div id=\"descNo\" className=\"description\">\r\n          <b>Select an algorithm!</b>\r\n        </div>\r\n        <div id=\"descDijkstra\" className=\"description hide\">\r\n          <b>Dijkstra Algorithm</b>: the original pathfinding algorithm - weighted - guarantees the shortest path\r\n        </div>\r\n        <div id=\"descASearch\" className=\"description hide\">\r\n          <b>A* Search</b>: the best pathfinding algorithm - weighted - guarantees the shortest path\r\n        </div>\r\n        <div id=\"dropdown\" className=\"dropdown-content hide\">\r\n          <ul>\r\n            <a id=\"selectDijkstra\" href=\"#\" onClick={() => this.selectAlgoDijkstra()}>Dijkstra</a>\r\n            <a id=\"selectASearch\" href=\"#\" onClick={() => this.selectAlgoASearch()}>A* Search</a>\r\n          </ul>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst removeWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n","F:\\Programming\\InProgress\\pathfinder\\src\\PathfindingVisualizer\\Node\\Node.js",[],["83","84"],"F:\\Programming\\InProgress\\pathfinder\\src\\algorithms\\dijkstra.js",[],"F:\\Programming\\InProgress\\pathfinder\\src\\Modal\\Modal.js",["85","86","87","88"],"import React, {Component} from 'react';\r\nimport logo from '../tutorial.gif';\r\n\r\nimport './Modal.css';\r\n\r\nexport default class Modal extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: true,\r\n      page: 1,\r\n    };\r\n  }\r\n\r\n  setFn() {\r\n    this.setState({show: false});\r\n  }\r\n\r\n  showModal () {\r\n    document.getElementById(`modal`).className = \"modal modAni\";\r\n    setTimeout(function() {this.setState({show: false})}.bind(this), 1000);\r\n  }\r\n\r\n  pageChange() {\r\n    this.setState({page: 2});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.show === false) {\r\n      return null;\r\n    }\r\n    if (this.state.page === 1){\r\n      return (\r\n        <div id=\"modal\" className=\"modal\">\r\n          <div id=\"modpg1\" className=\"modal-content\">\r\n            <h3>Welcome to</h3>\r\n            <h1><b>PathFinder</b></h1>\r\n            <p>This project was made by James Denbow</p>\r\n            <a href=\"https://github.com/JamesDenbow/PathFinder\" target=\"_blank\" className=\"tutButton\">GitHub</a>\r\n            <a href=\"http://www.jamesdenbow.com/projects/pathfinder.php\" target=\"_blank\" className=\"tutButton\">Learn More</a>\r\n            <button onClick={() => {this.pageChange();}} className=\"tutButton3\">Test it Out!</button>\r\n            <a href=\"http://www.jamesdenbow.com\" target=\"_blank\" className=\"tutButton2\">Website</a>\r\n            <a href=\"https://www.linkedin.com/in/jed-denbow/\" target=\"_blank\" className=\"tutButton2\">LinkedIn</a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div id=\"modal\" className=\"modal\">\r\n          <div id=\"modpg2\" className=\"modal-content2\">\r\n            <h3>Basic Functions:</h3>\r\n            <p>Click and drag your mouse across the grid to draw walls and/or move nodes.</p>\r\n            <img src={logo} alt=\"tutorial\" height=\"90%\"/>\r\n            <p>Use the top menu to select your pathfinding algorithm or generate a maze of walls!</p>\r\n            <button onClick={() => {this.showModal();}} className=\"tutButton3\">Start!</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","F:\\Programming\\InProgress\\pathfinder\\src\\algorithms\\astar.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"export function astar(grid, startNode, finishNode) {\r\n  const visitedNodes = [];\r\n  const nodeList = getAllNodes(grid);\r\n  const closedList = [];\r\n  //If start and finish are equal return\r\n  if (startNode === finishNode) {\r\n    return visitedNodes;\r\n  }\r\n  const openList = [];\r\n  startNode.f = 0;\r\n  openList.push(startNode);\r\n  visitedNodes.push(startNode);\r\n  var foundDest = false;\r\n\r\n  while (openList.length > 0) {\r\n    sortNodesByDistance(openList);\r\n    const currentNode = openList.shift();\r\n    closedList.push(currentNode);\r\n    const succN = nodeSearch(nodeList, (currentNode.col - 1), currentNode.row)\r\n    const succS = nodeSearch(nodeList, (currentNode.col + 1), currentNode.row)\r\n    const succE = nodeSearch(nodeList, currentNode.col, (currentNode.row + 1))\r\n    const succW = nodeSearch(nodeList, currentNode.col, (currentNode.row - 1))\r\n    succN.parent = currentNode;\r\n    succS.parent = currentNode;\r\n    succE.parent = currentNode;\r\n    succW.parent = currentNode;\r\n    if (succN.parent === '') {\r\n      succN.parent = currentNode;\r\n    }\r\n    if (succS.parent === '') {\r\n      succN.parent = currentNode;\r\n    }\r\n    if (succE.parent === '') {\r\n      succN.parent = currentNode;\r\n    }\r\n    if (succW.parent === '') {\r\n      succN.parent = currentNode;\r\n    }\r\n    var gNew;\r\n    var hNew;\r\n    var fNew;\r\n    if (!!succN) {\r\n      if (succN === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succN.isWall === false) {\r\n        visitedNodes.push(succN);\r\n        if (succN.g) {\r\n          gNew = succN.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succN.col;\r\n        var y = succN.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succN)) {\r\n          if (fNew < succN.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succN) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succN.f = fNew;\r\n        succN.g = gNew;\r\n        succN.h = hNew;\r\n        openList.push(succN);\r\n      }\r\n    }\r\n    if (!!succS) {\r\n      if (succS === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succS.isWall === false) {\r\n        visitedNodes.push(succS);\r\n        if (succS.g) {\r\n          gNew = succS.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succS.col;\r\n        var y = succS.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succS)) {\r\n          if (fNew < succS.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succS) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succS.f = fNew;\r\n        succS.g = gNew;\r\n        succS.h = hNew;\r\n        openList.push(succS);\r\n      }\r\n    }\r\n    if (!!succE) {\r\n      if (succE === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succE.isWall === false) {\r\n        visitedNodes.push(succE);\r\n        if (succE.g) {\r\n          gNew = succE.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succE.col;\r\n        var y = succE.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succE)) {\r\n          if (fNew < succE.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succE) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succE.f = fNew;\r\n        succE.g = gNew;\r\n        succE.h = hNew;\r\n        openList.push(succE);\r\n      }\r\n    }\r\n    if (!!succW) {\r\n      if (succW === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succW.isWall === false) {\r\n        visitedNodes.push(succW);\r\n        if (succW.g) {\r\n          gNew = succW.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succW.col;\r\n        var y = succW.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succW)) {\r\n          if (fNew < succW.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succW) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succW.f = fNew;\r\n        succW.g = gNew;\r\n        succW.h = hNew;\r\n        openList.push(succW);\r\n      }\r\n    }\r\n  }\r\n  if (!foundDest) {\r\n    return visitedNodes; //failed\r\n  }\r\n  else {\r\n    visitedNodes.push(finishNode);\r\n    return visitedNodes;\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\r\n}\r\n\r\nfunction nodeSearch(nodeList, col, row) {\r\n  for (var i = 0; i < nodeList.length; i++) {\r\n    if (nodeList[i].col === col && nodeList[i].row === row) {\r\n      return nodeList[i];\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.parent = '';\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction listSearch(list, node) {\r\n  for (var i = 0; i < list.length; i++) {\r\n    if (list[i].col === node.col && list[i].row === node.row) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  var i = 0;\r\n  while (currentNode !== null && i < 20) {\r\n    console.log(currentNode);\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.parent;\r\n    i++;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","F:\\Programming\\InProgress\\Pathfinder\\src\\index.js",[],"F:\\Programming\\InProgress\\Pathfinder\\src\\reportWebVitals.js",[],"F:\\Programming\\InProgress\\Pathfinder\\src\\App.js",[],"F:\\Programming\\InProgress\\Pathfinder\\src\\PathfindingVisualizer\\PathfindingVisualizer.js",["104","105","106","107","108","109","110","111","112"],"F:\\Programming\\InProgress\\Pathfinder\\src\\Modal\\Modal.js",["113","114","115","116"],"F:\\Programming\\InProgress\\Pathfinder\\src\\PathfindingVisualizer\\Node\\Node.js",[],"F:\\Programming\\InProgress\\Pathfinder\\src\\algorithms\\astar.js",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"F:\\Programming\\InProgress\\Pathfinder\\src\\algorithms\\dijkstra.js",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":276,"column":13,"nodeType":"138","messageId":"139","endLine":276,"endColumn":17},{"ruleId":"136","severity":1,"message":"140","line":277,"column":18,"nodeType":"138","messageId":"139","endLine":277,"endColumn":19},{"ruleId":"141","severity":1,"message":"142","line":335,"column":11,"nodeType":"143","endLine":335,"endColumn":94},{"ruleId":"141","severity":1,"message":"144","line":337,"column":13,"nodeType":"143","endLine":337,"endColumn":96},{"ruleId":"141","severity":1,"message":"142","line":338,"column":13,"nodeType":"143","endLine":338,"endColumn":88},{"ruleId":"141","severity":1,"message":"142","line":339,"column":13,"nodeType":"143","endLine":339,"endColumn":84},{"ruleId":"141","severity":1,"message":"142","line":340,"column":13,"nodeType":"143","endLine":340,"endColumn":84},{"ruleId":"141","severity":1,"message":"144","line":365,"column":13,"nodeType":"143","endLine":365,"endColumn":87},{"ruleId":"141","severity":1,"message":"144","line":366,"column":13,"nodeType":"143","endLine":366,"endColumn":85},{"ruleId":"132","replacedBy":"145"},{"ruleId":"134","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":39,"column":65,"nodeType":"149","endLine":39,"endColumn":80},{"ruleId":"147","severity":1,"message":"148","line":40,"column":74,"nodeType":"149","endLine":40,"endColumn":89},{"ruleId":"147","severity":1,"message":"148","line":42,"column":50,"nodeType":"149","endLine":42,"endColumn":65},{"ruleId":"147","severity":1,"message":"148","line":43,"column":63,"nodeType":"149","endLine":43,"endColumn":78},{"ruleId":"136","severity":1,"message":"150","line":93,"column":13,"nodeType":"138","messageId":"139","endLine":93,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":94,"column":13,"nodeType":"138","messageId":"139","endLine":94,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":95,"column":13,"nodeType":"138","messageId":"139","endLine":95,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":96,"column":13,"nodeType":"138","messageId":"139","endLine":96,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":101,"column":22,"nodeType":"138","messageId":"139","endLine":101,"endColumn":23},{"ruleId":"136","severity":1,"message":"150","line":129,"column":13,"nodeType":"138","messageId":"139","endLine":129,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":130,"column":13,"nodeType":"138","messageId":"139","endLine":130,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":131,"column":13,"nodeType":"138","messageId":"139","endLine":131,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":132,"column":13,"nodeType":"138","messageId":"139","endLine":132,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":137,"column":22,"nodeType":"138","messageId":"139","endLine":137,"endColumn":23},{"ruleId":"136","severity":1,"message":"150","line":165,"column":13,"nodeType":"138","messageId":"139","endLine":165,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":166,"column":13,"nodeType":"138","messageId":"139","endLine":166,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":167,"column":13,"nodeType":"138","messageId":"139","endLine":167,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":168,"column":13,"nodeType":"138","messageId":"139","endLine":168,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":173,"column":22,"nodeType":"138","messageId":"139","endLine":173,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":276,"column":13,"nodeType":"138","messageId":"139","endLine":276,"endColumn":17},{"ruleId":"136","severity":1,"message":"140","line":277,"column":18,"nodeType":"138","messageId":"139","endLine":277,"endColumn":19},{"ruleId":"141","severity":1,"message":"142","line":335,"column":11,"nodeType":"143","endLine":335,"endColumn":94},{"ruleId":"141","severity":1,"message":"144","line":337,"column":13,"nodeType":"143","endLine":337,"endColumn":96},{"ruleId":"141","severity":1,"message":"142","line":338,"column":13,"nodeType":"143","endLine":338,"endColumn":88},{"ruleId":"141","severity":1,"message":"142","line":339,"column":13,"nodeType":"143","endLine":339,"endColumn":84},{"ruleId":"141","severity":1,"message":"142","line":340,"column":13,"nodeType":"143","endLine":340,"endColumn":84},{"ruleId":"141","severity":1,"message":"144","line":365,"column":13,"nodeType":"143","endLine":365,"endColumn":87},{"ruleId":"141","severity":1,"message":"144","line":366,"column":13,"nodeType":"143","endLine":366,"endColumn":85},{"ruleId":"147","severity":1,"message":"148","line":39,"column":65,"nodeType":"149","endLine":39,"endColumn":80},{"ruleId":"147","severity":1,"message":"148","line":40,"column":74,"nodeType":"149","endLine":40,"endColumn":89},{"ruleId":"147","severity":1,"message":"148","line":42,"column":50,"nodeType":"149","endLine":42,"endColumn":65},{"ruleId":"147","severity":1,"message":"148","line":43,"column":63,"nodeType":"149","endLine":43,"endColumn":78},{"ruleId":"136","severity":1,"message":"150","line":81,"column":13,"nodeType":"138","messageId":"139","endLine":81,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":82,"column":13,"nodeType":"138","messageId":"139","endLine":82,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":83,"column":13,"nodeType":"138","messageId":"139","endLine":83,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":84,"column":13,"nodeType":"138","messageId":"139","endLine":84,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":89,"column":22,"nodeType":"138","messageId":"139","endLine":89,"endColumn":23},{"ruleId":"136","severity":1,"message":"150","line":117,"column":13,"nodeType":"138","messageId":"139","endLine":117,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":118,"column":13,"nodeType":"138","messageId":"139","endLine":118,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":119,"column":13,"nodeType":"138","messageId":"139","endLine":119,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":120,"column":13,"nodeType":"138","messageId":"139","endLine":120,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":125,"column":22,"nodeType":"138","messageId":"139","endLine":125,"endColumn":23},{"ruleId":"136","severity":1,"message":"150","line":153,"column":13,"nodeType":"138","messageId":"139","endLine":153,"endColumn":15},{"ruleId":"136","severity":1,"message":"151","line":154,"column":13,"nodeType":"138","messageId":"139","endLine":154,"endColumn":15},{"ruleId":"136","severity":1,"message":"152","line":155,"column":13,"nodeType":"138","messageId":"139","endLine":155,"endColumn":14},{"ruleId":"136","severity":1,"message":"153","line":156,"column":13,"nodeType":"138","messageId":"139","endLine":156,"endColumn":14},{"ruleId":"136","severity":1,"message":"140","line":161,"column":22,"nodeType":"138","messageId":"139","endLine":161,"endColumn":23},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-redeclare","'hole' is already defined.","Identifier","redeclared","'i' is already defined.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["154"],["155"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'gx' is already defined.","'gy' is already defined.","'x' is already defined.","'y' is already defined.","no-global-assign","no-unsafe-negation"]
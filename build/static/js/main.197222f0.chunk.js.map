{"version":3,"sources":["PathfindingVisualizer/Node/Node.js","algorithms/dijkstra.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.js","tutorial.gif","Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","astar","visitedNodes","nodeList","parent","closedList","openList","f","foundDest","currentNode","gNew","hNew","fNew","succN","nodeSearch","succS","succE","succW","g","gx","gy","x","y","Math","abs","listSearch","i","splice","h","list","PathfindingVisualizer","state","mouseIsPressed","moveStart","moveFinish","startNodeCol","startNodeRow","finishNodeCol","finishNodeRow","working","getInitialGrid","setState","window","onclick","event","target","matches","document","getElementById","newGrid","getNewGridWithWallToggled","newGrid2","updateStart","updateFinish","nodesInShortestPathOrder","algo","node2","setTimeout","animateShortestPath","clearPath","removeWall","unshift","getNodesInShortestPathOrderDijkstra","animateSearch","console","log","getNodesInShortestPathOrderAstar","grid2","len","len2","width","height","random","min","max","floor","x2","y2","ori","difY","randomIntRange","hole","genMaze_divide","genMaze_orientation","difX","onClick","location","reload","dropdownToggle","href","generateMaze","clearBoard","visualizeDijkstra","visualizeASearch","selectAlgoDijkstra","selectAlgoASearch","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","Modal","show","page","bind","pageChange","src","logo","alt","showModal","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.197222f0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  const visitedNodes = [];\r\n  const nodeList = getAllNodes(grid);\r\n  const closedList = [];\r\n  //If start and finish are equal return\r\n  if (startNode === finishNode) {\r\n    return visitedNodes;\r\n  }\r\n  const openList = [];\r\n  startNode.f = 0;\r\n  openList.push(startNode);\r\n  visitedNodes.push(startNode);\r\n  var foundDest = false;\r\n\r\n  while (openList.length > 0) {\r\n    sortNodesByDistance(openList);\r\n    const currentNode = openList.shift();\r\n    closedList.push(currentNode);\r\n    const succN = nodeSearch(nodeList, (currentNode.col - 1), currentNode.row)\r\n    const succS = nodeSearch(nodeList, (currentNode.col + 1), currentNode.row)\r\n    const succE = nodeSearch(nodeList, currentNode.col, (currentNode.row + 1))\r\n    const succW = nodeSearch(nodeList, currentNode.col, (currentNode.row - 1))\r\n    succN.parent = currentNode;\r\n    succS.parent = currentNode;\r\n    succW.parent = currentNode;\r\n    succE.parent = currentNode;\r\n    var gNew;\r\n    var hNew;\r\n    var fNew;\r\n    if (!!succN) {\r\n      if (succN === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succN.isWall === false) {\r\n        visitedNodes.push(succN);\r\n        if (succN.g) {\r\n          gNew = succN.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succN.col;\r\n        var y = succN.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succN)) {\r\n          if (fNew < succN.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succN) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succN.f = fNew;\r\n        succN.g = gNew;\r\n        succN.h = hNew;\r\n        openList.push(succN);\r\n      }\r\n    }\r\n    if (!!succS) {\r\n      if (succS === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succS.isWall === false) {\r\n        visitedNodes.push(succS);\r\n        if (succS.g) {\r\n          gNew = succS.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succS.col;\r\n        var y = succS.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succS)) {\r\n          if (fNew < succS.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succS) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succS.f = fNew;\r\n        succS.g = gNew;\r\n        succS.h = hNew;\r\n        openList.push(succS);\r\n      }\r\n    }\r\n    if (!!succE) {\r\n      if (succE === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succE.isWall === false) {\r\n        visitedNodes.push(succE);\r\n        if (succE.g) {\r\n          gNew = succE.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succE.col;\r\n        var y = succE.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succE)) {\r\n          if (fNew < succE.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succE) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succE.f = fNew;\r\n        succE.g = gNew;\r\n        succE.h = hNew;\r\n        openList.push(succE);\r\n      }\r\n    }\r\n    if (!!succW) {\r\n      if (succW === finishNode) {\r\n        finishNode.parent = currentNode;\r\n        foundDest = true;\r\n        visitedNodes.push(finishNode);\r\n        return visitedNodes;\r\n      }\r\n      else if (succW.isWall === false) {\r\n        visitedNodes.push(succW);\r\n        if (succW.g) {\r\n          gNew = succW.g + 1;\r\n        }\r\n        else {\r\n          gNew = 1;\r\n        }\r\n        var gx = finishNode.col;\r\n        var gy = finishNode.row;\r\n        var x = succW.col;\r\n        var y = succW.row;\r\n        hNew = Math.abs(x - gx) + Math.abs(y - gy);\r\n        fNew = gNew + hNew;\r\n        if (listSearch(openList, succW)) {\r\n          if (fNew < succW.f) {\r\n            for (var i = 0; i < openList.length; i++) {\r\n              if (openList[i] === succW) {\r\n                openList.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        succW.f = fNew;\r\n        succW.g = gNew;\r\n        succW.h = hNew;\r\n        openList.push(succW);\r\n      }\r\n    }\r\n\r\n\r\n\r\n  }\r\n  if (!foundDest) {\r\n    return visitedNodes; //failed\r\n  }\r\n  else {\r\n    visitedNodes.push(finishNode);\r\n    return visitedNodes;\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\r\n}\r\n\r\nfunction nodeSearch(nodeList, col, row) {\r\n  for (var i = 0; i < nodeList.length; i++) {\r\n    if (nodeList[i].col === col && nodeList[i].row === row) {\r\n      return nodeList[i];\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.parent = '';\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction listSearch(list, node) {\r\n  for (var i = 0; i < list.length; i++) {\r\n    if (list[i].col === node.col && list[i].row === node.row) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  var i = 0;\r\n  while (currentNode !== null && i < 20) {\r\n    console.log(currentNode);\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.parent;\r\n    i++;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrderDijkstra} from '../algorithms/dijkstra';\r\nimport {astar, getNodesInShortestPathOrderAstar} from '../algorithms/astar';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      moveStart: false,\r\n      moveFinish: false,\r\n      startNodeCol: START_NODE_COL,\r\n      startNodeRow: START_NODE_ROW,\r\n      finishNodeCol: FINISH_NODE_COL,\r\n      finishNodeRow: FINISH_NODE_ROW,\r\n      working: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n    window.onclick = function(event) {\r\n      if (!event.target.matches('#dropbtn')) {\r\n        document.getElementById(\"dropdown\").className = 'dropdown-content hide';\r\n        document.getElementById(\"dropbtn\").className = 'navItem';\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.working) return;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    if (row === startNodeRow && col === startNodeCol){\r\n      this.setState({mouseIsPressed: true, moveStart: true});\r\n    }\r\n    else if (row === finishNodeRow && col === finishNodeCol) {\r\n      this.setState({mouseIsPressed: true, moveFinish: true});\r\n    }\r\n    else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.working) return;\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (this.state.moveStart) {\r\n      const {startNodeCol} = this.state;\r\n      const {startNodeRow} = this.state;\r\n      const newGrid2 = updateStart(this.state.grid, startNodeRow, startNodeCol);\r\n      const newGrid = updateStart(newGrid2, row, col);\r\n      this.setState({grid: newGrid, startNodeCol: col, startNodeRow: row});\r\n    }\r\n    else if (this.state.moveFinish){\r\n      const {finishNodeCol} = this.state;\r\n      const {finishNodeRow} = this.state;\r\n      const newGrid2 = updateFinish(this.state.grid, finishNodeRow, finishNodeCol);\r\n      const newGrid = updateFinish(newGrid2, row, col);\r\n      this.setState({grid: newGrid, finishNodeCol: col, finishNodeRow: row});\r\n    }\r\n    else {\r\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n      this.setState({grid: newGrid});\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false, moveStart: false, moveFinish: false});\r\n  }\r\n\r\n  animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, algo) {\r\n    const node2 = visitedNodesInOrder[0];\r\n    document.getElementById(`node-${node2.row}-${node2.col}`).className =\r\n      'node node-visited node-start';\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder, algo);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      const node = visitedNodesInOrder[i];\r\n      setTimeout(() => {\r\n        if (i === (visitedNodesInOrder.length - 1)){\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited node-finish';\r\n        }\r\n        else {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder, algo) {\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[0];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path node-start';\r\n    }, 50 * 0);\r\n    for (let i = 1; i < (nodesInShortestPathOrder.length - 1); i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n    const x = nodesInShortestPathOrder.length - 1;\r\n    setTimeout(() => {\r\n      const node = nodesInShortestPathOrder[x];\r\n      document.getElementById(`node-${node.row}-${node.col}`).className =\r\n        'node node-shortest-path node-finish';\r\n      document.getElementById(`navGenMaze`).className = 'navItem';\r\n      document.getElementById(`navClear`).className = 'navItem';\r\n      document.getElementById(`navClearP`).className = 'navItem';\r\n      if (algo === 1) {\r\n        document.getElementById(`navPathDijkstra`).className = 'visButton vertical-center';\r\n      }\r\n      else if (algo === 2) {\r\n        document.getElementById(`navPathASearch`).className = 'visButton vertical-center';\r\n      }\r\n    }, 50 * x);\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    document.getElementById(`navPathDijkstra`).className = 'visButton vertical-center disabled';\r\n    this.clearPath();\r\n    this.setState({working: true});\r\n    const {grid} = this.state;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    const newGrid = removeWall(grid, startNodeRow, startNodeCol);\r\n    const newGrid2 = removeWall(newGrid, finishNodeRow, finishNodeCol);\r\n    this.setState({grid: newGrid2});\r\n    const startNode = newGrid2[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid2[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = dijkstra(newGrid2, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, 1);\r\n  }\r\n\r\n  visualizeASearch() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    document.getElementById(`navPathASearch`).className = 'visButton vertical-center disabled';\r\n    this.clearPath();\r\n    this.setState({working: true});\r\n    const {grid} = this.state;\r\n    const {startNodeCol} = this.state;\r\n    const {startNodeRow} = this.state;\r\n    const {finishNodeCol} = this.state;\r\n    const {finishNodeRow} = this.state;\r\n    const newGrid = removeWall(grid, startNodeRow, startNodeCol);\r\n    const newGrid2 = removeWall(newGrid, finishNodeRow, finishNodeCol);\r\n    this.setState({grid: newGrid2});\r\n    const startNode = newGrid2[startNodeRow][startNodeCol];\r\n    const finishNode = newGrid2[finishNodeRow][finishNodeCol];\r\n    const visitedNodesInOrder = astar(newGrid2, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(finishNode);\r\n    this.animateSearch(visitedNodesInOrder, nodesInShortestPathOrder, 2);\r\n  }\r\n\r\n  clearBoard() {\r\n    const grid2 = getInitialGrid();\r\n    this.setState({grid: grid2, startNodeCol: START_NODE_COL, startNodeRow: START_NODE_ROW, finishNodeRow: FINISH_NODE_ROW, finishNodeCol: FINISH_NODE_COL});\r\n    const {grid} = this.state;\r\n    const len = grid.length;\r\n    const len2 = grid[0].length;\r\n    for (var i = 0; i < len; i++) {\r\n      for (var x = 0; x < len2; x++) {\r\n        if (x === this.state.startNodeCol && i === this.state.startNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-start\";\r\n        }\r\n        else if (x === this.state.finishNodeCol && i === this.state.finishNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-finish\";\r\n        }\r\n        else {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    document.getElementById(`navGenMaze`).className = 'navItem';\r\n    this.setState({working: false});\r\n  }\r\n\r\n  clearPath(){\r\n    const {grid} = this.state;\r\n    const len = grid.length;\r\n    const len2 = grid[0].length;\r\n    for (var i = 0; i < len; i++) {\r\n      for (var x = 0; x < len2; x++) {\r\n        if (x === this.state.startNodeCol && i === this.state.startNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-start\";\r\n        }\r\n        else if (x === this.state.finishNodeCol && i === this.state.finishNodeRow) {\r\n          document.getElementById(`node-${i}-${x}`).className = \"node node-finish\";\r\n        }\r\n        else {\r\n          if(grid[i][x].isWall === false){\r\n            document.getElementById(`node-${i}-${x}`).className = \"node\";\r\n          }\r\n          else {\r\n            document.getElementById(`node-${i}-${x}`).className = \"node node-wall\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  genMaze_orientation(width, height) {\r\n    if (width < height) {\r\n      return 'h';\r\n    }\r\n    else if (height < width) {\r\n      return 'v';\r\n    }\r\n    else {\r\n      var rand = Math.random();\r\n      if (rand < 0.5){\r\n        return 'h';\r\n      }\r\n      else {\r\n        return 'v';\r\n      }\r\n    }\r\n  }\r\n\r\n  randomIntRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  genMaze_divide(grid, x, y, x2, y2, ori) {\r\n    if (ori === 'h' ){\r\n      if ((x2 - x) < 2) {\r\n        return grid;\r\n      }\r\n      else {\r\n        var difY = Math.floor(this.randomIntRange(y, y2) / 2) * 2;\r\n        var hole = Math.floor(this.randomIntRange(x, x2) / 2) * 2 + 1;\r\n        for (var i = x; i <= x2; i++){\r\n          if (i !== hole) {\r\n            grid = getNewGridWithWallToggled(grid, difY, i);\r\n          }\r\n        }\r\n        grid = this.genMaze_divide(grid, x, y, x2, (difY - 1), this.genMaze_orientation((x2 - x), ((difY - 1) - y)));\r\n        grid = this.genMaze_divide(grid, x, (difY + 1), x2, y2, this.genMaze_orientation((x2 - x), (y2 - (difY + 1))));\r\n      }\r\n    }\r\n    else {\r\n      if ((y2 - y) < 2) {\r\n        return grid;\r\n      }\r\n      else {\r\n        var difX = Math.floor(this.randomIntRange(x, x2) / 2) * 2;\r\n        var hole = Math.floor(this.randomIntRange(y, y2) / 2) * 2 + 1;\r\n        for (var i = y; i <= y2; i++){\r\n          if (i !== hole) {\r\n            grid = getNewGridWithWallToggled(grid, i, difX);\r\n          }\r\n        }\r\n        grid = this.genMaze_divide(grid, x, y, (difX - 1), y2, this.genMaze_orientation(((difX - 1) - x), (y2 - y)));\r\n        grid = this.genMaze_divide(grid, (difX + 1), y, x2, y2, this.genMaze_orientation((x2 - (difX + 1)), (y2 - y)));\r\n      }\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  generateMaze() {\r\n    document.getElementById(`navGenMaze`).className = 'navItem disabled';\r\n    document.getElementById(`navClear`).className = 'navItem disabled';\r\n    document.getElementById(`navClearP`).className = 'navItem disabled';\r\n    var {grid} = this.state;\r\n    grid = this.genMaze_divide(grid, 0, 0, 49, 19, this.genMaze_orientation(49, 19));\r\n    this.setState({grid});\r\n    document.getElementById(`navClear`).className = 'navItem';\r\n    document.getElementById(`navClearP`).className = 'navItem';\r\n  }\r\n\r\n  selectAlgoDijkstra() {\r\n    this.clearPath();\r\n    document.getElementById(\"selectDijkstra\").className = 'active disabled';\r\n    document.getElementById(\"selectASearch\").className = '';\r\n    document.getElementById(\"descNo\").className = 'description hide';\r\n    document.getElementById(\"descDijkstra\").className = 'description show';\r\n    document.getElementById(\"descASearch\").className = 'description hide';\r\n    document.getElementById(\"navPathNo\").className = 'visButton vertical-center disabled hide';\r\n    document.getElementById(\"navPathDijkstra\").className = 'visButton vertical-center';\r\n    document.getElementById(\"navPathASearch\").className = 'visButton vertical-center hide';\r\n  }\r\n\r\n  selectAlgoASearch() {\r\n    this.clearPath();\r\n    document.getElementById(\"selectDijkstra\").className = '';\r\n    document.getElementById(\"selectASearch\").className = 'active disabled';\r\n    document.getElementById(\"descNo\").className = 'description hide';\r\n    document.getElementById(\"descDijkstra\").className = 'description hide';\r\n    document.getElementById(\"descASearch\").className = 'description show';\r\n    document.getElementById(\"navPathNo\").className = 'visButton vertical-center disabled hide';\r\n    document.getElementById(\"navPathDijkstra\").className = 'visButton vertical-center hide';\r\n    document.getElementById(\"navPathASearch\").className = 'visButton vertical-center';\r\n  }\r\n\r\n  dropdownToggle() {\r\n    document.getElementById(\"dropbtn\").className = 'navItem disabled';\r\n    document.getElementById(\"dropdown\").className = 'dropdown-content show';\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"topMenu\">\r\n          <a onClick={() => window.location.reload(false)} className=\"vertical-center title\"><h1><b>PathFinder</b></h1></a>\r\n          <span className=\"vertical-center nav\">\r\n            <a id=\"dropbtn\" onClick={() => this.dropdownToggle()} href=\"#\" className=\"navItem\">Algorithms <span className=\"caretDown\">▼</span></a>\r\n            <a id=\"navGenMaze\" onClick={() => this.generateMaze()} className=\"navItem\">Generate Maze</a>\r\n            <a id=\"navClear\" onClick={() => this.clearBoard()} className=\"navItem\">Clear Board</a>\r\n            <a id=\"navClearP\" onClick={() => this.clearPath()} className=\"navItem\">Clear Path</a>\r\n          </span>\r\n          <button id=\"navPathNo\" className=\"visButton vertical-center disabled\">Find Path</button>\r\n          <button id=\"navPathDijkstra\" className=\"visButton vertical-center hide\" onClick={() => this.visualizeDijkstra()}>Find Path</button>\r\n          <button id=\"navPathASearch\" className=\"visButton vertical-center hide\" onClick={() => this.visualizeASearch()}>Find Path</button>\r\n        </div>\r\n        <div className=\"keyMenu\">\r\n          <span className=\"keyMenuItem\"><span className=\"endNode\">★</span> Start Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"endNode\">⦿</span> End Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample\"></span> Unvisited Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample2\"></span> Visited Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample3\"></span> Path Node</span>\r\n          <span className=\"keyMenuItem\"><span className=\"nodeExample4\"></span> Wall Node</span>\r\n        </div>\r\n        <div id=\"descNo\" className=\"description\">\r\n          <b>Select an algorithm!</b>\r\n        </div>\r\n        <div id=\"descDijkstra\" className=\"description hide\">\r\n          <b>Dijkstra Algorithm</b>: the original pathfinding algorithm - weighted - guarantees the shortest path\r\n        </div>\r\n        <div id=\"descASearch\" className=\"description hide\">\r\n          <b>A* Search</b>: the best pathfinding algorithm - weighted - guarantees the shortest path\r\n        </div>\r\n        <div id=\"dropdown\" className=\"dropdown-content hide\">\r\n          <ul>\r\n            <a id=\"selectDijkstra\" href=\"#\" onClick={() => this.selectAlgoDijkstra()}>Dijkstra</a>\r\n            <a id=\"selectASearch\" href=\"#\" onClick={() => this.selectAlgoASearch()}>A* Search</a>\r\n          </ul>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStart: !node.isStart,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst updateFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isFinish: !node.isFinish,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst removeWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: false,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/tutorial.037c4aef.gif\";","import React, {Component} from 'react';\r\nimport logo from '../tutorial.gif';\r\n\r\nimport './Modal.css';\r\n\r\nexport default class Modal extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: true,\r\n      page: 1,\r\n    };\r\n  }\r\n\r\n  setFn() {\r\n    this.setState({show: false});\r\n  }\r\n\r\n  showModal () {\r\n    document.getElementById(`modal`).className = \"modal modAni\";\r\n    setTimeout(function() {this.setState({show: false})}.bind(this), 1000);\r\n  }\r\n\r\n  pageChange() {\r\n    this.setState({page: 2});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.show === false) {\r\n      return null;\r\n    }\r\n    if (this.state.page === 1){\r\n      return (\r\n        <div id=\"modal\" className=\"modal\">\r\n          <div id=\"modpg1\" className=\"modal-content\">\r\n            <h3>Welcome to</h3>\r\n            <h1><b>PathFinder</b></h1>\r\n            <p>This project was made by James Denbow</p>\r\n            <a href=\"https://github.com/JamesDenbow/PathFinder\" target=\"_blank\" className=\"tutButton\">GitHub</a>\r\n            <a href=\"http://www.jamesdenbow.com/projects/pathfinder.php\" target=\"_blank\" className=\"tutButton\">Learn More</a>\r\n            <button onClick={() => {this.pageChange();}} className=\"tutButton3\">Test it Out!</button>\r\n            <a href=\"http://www.jamesdenbow.com\" target=\"_blank\" className=\"tutButton2\">Website</a>\r\n            <a href=\"https://www.linkedin.com/in/jed-denbow/\" target=\"_blank\" className=\"tutButton2\">LinkedIn</a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div id=\"modal\" className=\"modal\">\r\n          <div id=\"modpg2\" className=\"modal-content2\">\r\n            <h3>Basic Functions:</h3>\r\n            <p>Click and drag your mouse across the grid to draw walls and/or move nodes.</p>\r\n            <img src={logo} alt=\"tutorial\" height=\"90%\"/>\r\n            <p>Use the top menu to select your pathfinding algorithm or generate a maze of walls!</p>\r\n            <button onClick={() => {this.showModal();}} className=\"tutButton3\">Start!</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nimport Modal from './Modal/Modal';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Modal></Modal>\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}